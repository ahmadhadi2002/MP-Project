<!DOCTYPE html>
<html>
<link rel="stylesheet" type="text/css" href="../shared_css/style(t).css">

<main>
  <div class="faq-heading">
    <h1 style="font-size: 35px; font-size: 35px;margin-bottom: 0px;">
      ONE-TIME PAD
    </h1>
    <p style="padding-top: 0px; margin-top: 0px;"> Cryptography | Symmetric Key Encryption Cipher | Most Secured
      Technique</p>
    <p style="font-size:18px">
      One-time pad cipher (OTP) is a type of Vignere cipher and an improvement of Vernam cipher which is the only
      available
      algorithm that was deemed as unbreakable (Complete secure). The ciphertext generated by OTP is random and does not
      have any statistical relation with the plaintext due to it's unique feature such as key is made up of random
      message, can be only used once and nvr again to encrypt other message as well as being exactly same length and the
      message when encrypted making it complete secure and invulnerable.<br>
      <br>
      The security of OTP are as follows:
    </p>
    <ul>
      <li>The ciphertext's characters will be truly random if the key's characters are truly random. Thus, there are no
        patterns or regularities that a cryptanalyst can use to attack the ciphertext.</li>
      <li>Attemption of bruteforce would led to many legitimate plaintext without any knowing of the original plaintext
      </li>
    </ul>
    <p style="font-size:18px">
      Desipte of the idea behind a one-time pad to prevent attackers from decrypting the encrypted message even with an
      infinite amount of computing power with the key kept safely. OTP still face challenges and the main challenge is
      key
      distribution - both the sender and receiver must have a copy of the same key to use a one-time pad and this key
      must
      be kept secret as the encryption is no longer secure in the event if an attacker gains access to the key.
    </p>
    <div <section class="faq-container">
      <div class="faq-two">
        <!-- faq question -->
        <h1 class="faq-page">Background (Brief)</h1>
        <!-- faq answer -->
        <div class="faq-body">
          <p style="font-size:18px">
            The concept was first described in the late 1910s by an American engineer name Gilbert Vernam. Gilbert
            proposed the idea of using a sequence of random numbers to encrypt messages which can be only used once
            , hence the name "one-time pad".
            <br>
            OTP were widely used during World War II by various military organizations for secure communication
            because of its simplicity and security. It became a popular method for encrypting classified information
            and diplomatic communications.
            <br>
            However, the widespread use of OTP also led to some notable security breaches. Such as the KGB could
            decrypt a significant amount of U.S. government communication due to the usage of OIP in an insecure
            manner during the Cold War. The KGB was able to obtain the keys used for encryption through various
            means like signal interception espionage and espionage.
            <br>
            Despite these security breaches, OTP are still considered to be an extremely secure encryption method
            as long as they are used correctly. However, the difficulty of securely distributing the keys causes
            their widespread use to decline in recent years amd the increasing use of more modern encryption
            methods.
            <br>
            Overall, the one-time pad remains an important historical and theoretical concept in the field of
            cryptography and its ideas continue to influence modern encryption methods.
          </p>
        </div>
      </div>
      <hr class="hr-line">

      <div class="faq-three">
        <!-- faq question -->
        <h1 class="faq-page">Application/Process</h1>
        <!-- faq answer -->
        <div class="faq-body">
          <section class="container" ; name="app">
            <h2><u>Application/Process</u></h2>
            <p style="font-size:18px">
              OTP process can be broken down into 3 main steps (Key Generation, Encryption & Decryption). IN OTP, the
              key
              and Plaintext are represented in binary format with each character representing a sequence of
              bits.<br><br>
              <u>Key Generation: </u>
            <ul>
              <li> It is the first step of the OTP encryption process where it would generate a random key with the same
                length as the plaintext message. Th generated key would be used for Encryption & Decryption. It is
                crucial to ensure that the key is absolutely random and kept secret to prevent the attackers from easily
                decrypting the ciphertext.</li>
            </ul>
            <br>
            Encryption: <ul>
              <li> The Plaintext message would be XOR (exclusive OR) with the key to produce the Ciphertext, for
                example: <br>
                <img src="../../ui/img/Encryption/otp/b.jpg" alt="Parameter Table" width="500" height="100">
                <br>

                <br>The encryption process can be represented as follows: <br>
                <img src="../../ui/img/Encryption/otp/en.jpg" width="900" height="200">

                <br>The resulting ciphertext is XWJVU.
              </li>
              <br>
              <u>Decryption: </u>
              <li> In this step, the Ciphertext would be XORed with the same key used to produce the original Plaintext.
                The XOR operation is the similar tp the Encryption step instead it would be performed in reverse. For
                example:<br><br>
                The decryption process can be represented as follows:
                <br>

                <img src="../../ui/img/Encryption/otp/de.jpg" width="900" height="200">
                <br> As shown in the table, the resulting plaintext is "01001000 01100101 01001100 01001100 01101111".
                Correspond to the Plaintext message "HELLO".
              </li>
              <br>
            </ul>

            XOR (exclusive OR) operation â€“ A fundamental component of the one-time pad encryption process, it is a
            bitwise operation comparing the corresponding bits in 2 binary sequences and outputs a new sequence of
            bits according to the result of the comparison. If 1 of the corresponding bits in the 2 sequences is 1,
            the result is set to 1. If both bits are 1 or both bits are 0, the result would be 0.
            <br>
            <br>
            <br>
            <?php
            include('slideshow.php')
              ?>
            <br>
            <hr>
          </section>
        </div>
      </div>
      <hr class="hr-line">

      <div class="faq-four">

        <!-- faq question -->
        <h1 class="faq-page">Video</h1>

        <!-- faq answer -->
        <div class="faq-body">
          <section class="container" ; name="test">
            Watch the video to gain deeper understanding!
            <br>
            <iframe width="560" height="315" src="https://www.youtube.com/embed/QVV_bUxxiZ8"
              title="YouTube video player" frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowfullscreen></iframe>
            <hr>
          </section>
        </div>
      </div>
      <hr class="hr-line">

      <div class="faq-five">

        <!-- faq question -->
        <h1 class="faq-page">Advantages & Disadvantages</h1>

        <!-- faq answer -->
        <div class="faq-body">
          <section class="container" ; name="com">
            <h2><u>Advantage & Disadvantage</u></h2>
            <table>
              <tr>
                <th>
                  Advantage
                </th>
                <th>
                  Disadvantage
                </th>
              </tr>
              <tr>
                <td>
                  Highest level of security compared to any other cryptographic technique since it uses a unique and
                  random key for every encryption
                </td>
                <td>
                  Requires the generation and distribution of a unique and random key for every encryption - a
                  significant challenge in practice.
                </td>
              </tr>
              <tr>
                <td>
                  One of the most secure encryption methods as The security of it is provable mathematically
                </td>
                <td>
                  Requires a key that is as long as the plaintext which can pose as an issue in the event of the
                  plaintext is large or key transmittion is not feasible.
              </tr>
              <tr>
                <td>
                  The key is never reused, eliminating any risk of attackers attempting to try decrypt multiple messages
                  with the key.
                </td>
                <td>
                  Inefficient encryption method due to a large amount of resources and storage space required for
                  implementation
                </td>
              </tr>
              <tr>
                <td>
                  Does not require a key exchange between the sender and receiver, an ideal technique for secure
                  communication in situations if a secure key exchange is not possible.
                </td>
                <td>
                  Useful for encrypting small amounts of data only.
                </td>
              </tr>
            </table>
            <hr>
          </section>
        </div>
      </div>
      <hr class="hr-line">


      </section>
</main>

</html>

<script>
  var faq = document.getElementsByClassName("faq-page");
  var i;

  for (i = 0; i < faq.length; i++) {
    faq[i].addEventListener("click", function () {
      this.classList.toggle("active");

      var body = this.nextElementSibling;
      if (body.style.display === "block") {
        body.style.display = "none";
      } else {
        body.style.display = "block";
      }
    });
  }
</script>